# Type 'touch ~/.bash_profile', open that file and copy the remainder of this stuff into it.

# The prompt is now delightfully called "The Prompt", and decorated with a star.
# Every line is timestamped, and if you're in a git repository, the name of the branch will be displayed.

# Use those export and path things with care, make sure they do what you want them to do, or comment them out.

# If you're using Sublime Text 2, check if you have the 'subl' shortcut in place. 

# If not: go to the terminal and type 'open /Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl'
# Did that open Sublime? Good. Then type 'ln -s /Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/subl' <- Make sure that last directory exists first, and if it doesn't, create it.
# You now have the 'subl' shortcut

# Set up rulers in Sublime: Open a .py file. Go to "Sublime Text", "Preferences", "Settings - Syntax Specific"
# In the file that opens, add "rulers": [80]" inside of the hash. Now all files that end in .py will display
# a ruler at the 80th character.

# Set up key bindings in Sublime: Go to "Sublime Text", "Preferences", "Key Bindings". In the file that opens,
# add something like this:  {"keys": ["p", "d", "b", " "], "command": "insert_snippet", "args": {"contents": "import pdb; pdb.set_trace()"} },
# Now "pdb " will always be replaced properly.

# Get the coffeescript.tmlanguage and the coffeescript.tmpreferences files from this repo, and copy them into
# Library/Application\ Support/Sublime\ Text\ 3/Packages. That's designed to work with Sublime 2, but it
# works just as well with 3. Restart Sublime, and you'll have syntax highlighting for coffeescript.

# Once git is up and running, run 'git config branch.autosetuprebase always' and then 'git config branch.*branch-name*.rebase true' for any branch you've already got going
# Now git will use --rebase by defualt

# Configuring Our Prompt
# ======================

  # if you install git via homebrew, or install the bash autocompletion via homebrew, you get __git_ps1 which you can use in the PS1
  # to display the git branch.  it's supposedly a bit faster and cleaner than manually parsing through sed. i dont' know if you care 
  # enough to change it

  # This function is called in your prompt to output your active git branch.
  function parse_git_branch {
    git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
  }

  # This function builds your prompt. It is called below
  function prompt {
    # Define some local colors
    local         RED="\[\033[0;31m\]" # This syntax is some weird bash color thing I never
    local   LIGHT_RED="\[\033[1;31m\]" # really understood
    local        BLUE="\[\033[0;34m\]"
    local        CHAR="☆"
    # ♥ ☆ - Keeping some cool ASCII Characters for reference

    # Here is where we actually export the PS1 Variable which stores the text for your prompt
    export PS1="\[\e]2;\u@\h\a[\[\e[37;44;1m\]\t\[\e[0m\]]$BLUE\$(parse_git_branch) \[\e[32m\]\W\[\e[0m\]\n\[\e[0;34m\]The Prompt $CHAR \[\e[0m\]"
      PS2='> '
      PS4='+ '
    }

  # Finally call the function and our prompt is all pretty
  prompt

  # For more prompt coolness, check out Halloween Bash:
  # http://xta.github.io/HalloweenBash/

  # If you break your prompt, just delete the last thing you did.
  # And that's why it's good to keep your dotfiles in git too.

# Environment Variables
# =====================
  # Library Paths
  # These variables tell your shell where they can find certain
  # required libraries so other programs can reliably call the variable name
  # instead of a hardcoded path.

    # NODE_PATH
    # Node Path from Homebrew I believe
    export NODE_PATH="/usr/local/lib/node_modules:$NODE_PATH"

    # Those NODE & Python Paths won't break anything even if you
    # don't have NODE or Python installed. Eventually you will and
    # then you don't have to update your bash_profile

  # Configurations

    # GIT_MERGE_AUTO_EDIT
    # This variable configures git to not require a message when you merge.
    export GIT_MERGE_AUTOEDIT='no'

  # Paths

    # The USR_PATHS variable will just store all relevant /usr paths for easier usage
    # Each path is seperate via a : and we always use absolute paths.

    # A bit about the /usr directory
    # The /usr directory is a convention from linux that creates a common place to put
    # files and executables that the entire system needs access too. It tries to be user
    # independent, so whichever user is logged in should have permissions to the /usr directory.
    # We call that /usr/local. Within /usr/local, there is a bin directory for actually
    # storing the binaries (programs) that our system would want.
    # Also, Homebrew adopts this convetion so things installed via Homebrew
    # get symlinked into /usr/local
    export USR_PATHS="/usr/local:/usr/local/bin:/usr/local/sbin:/usr/bin:/Users/katebrender/Library/Python/2.7/bin"

    # Hint: You can interpolate a variable into a string by using the $VARIABLE notation as below.

    # We build our final PATH by combining the variables defined above
    # along with any previous values in the PATH variable.

    # Our PATH variable is special and very important. Whenever we type a command into our shell,
    # it will try to find that command within a directory that is defined in our PATH.
    # Read http://blog.seldomatt.com/blog/2012/10/08/bash-and-the-one-true-path/ for more on that.
    export PATH="$USR_PATHS:$PATH"

    # If you go into your shell and type: $PATH you will see the output of your current path.
    # For example, mine is:
    # /Users/avi/.rvm/gems/ruby-1.9.3-p392/bin:/Users/avi/.rvm/gems/ruby-1.9.3-p392@global/bin:/Users/avi/.rvm/rubies/ruby-1.9.3-p392/bin:/Users/avi/.rvm/bin:/usr/local:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/local/mysql/bin:/usr/local/share/python:/bin:/usr/sbin:/sbin:

    # I've got Arcanist installed in my Development folder (maybe I should re-think that but wev). I'm
    # adding its location to the PATH variable so the command 'arc' can be found.
    export PATH="/Users/katebrender/Development/arcanist/bin:$PATH"

# Helpful Functions
# =====================

# A function to CD into the desktop from anywhere
# so you just type desktop.
# HINT: It uses the built in USER variable to know your OS X username

# USE: desktop
#      desktop subfolder
function desktop {
  cd /Users/$USER/Desktop/$@
}

# USE: cloud
function cloud {
  eval "$(pyenv init - bash)" && eval "$(pyenv virtualenv-init -)" && cd ~/Development/cloud-core
}

function tf {
  cd /Users/katebrender/Development/cloud-core/nylas/infrastructure/terraform/aws/
}

# USE: development
function development {
  cd ~/Development
}

# USE: notes
function notes {
  cd ~/Desktop/notes
}

# USE: twilio-delete $CALL_SID - sends a DELETE request with inputted call sid
function twilio-delete () {
  curl 'https://api.twilio.com/2010-04-01/Accounts/AC6d7cbd146b8c78fc99d8cb680c9d7fb7/Calls/'$@'.json' -X DELETE -u AC6d7cbd146b8c78fc99d8cb680c9d7fb7:65e2d7f61b44f98d4609c2202a5f6fa6;
}

# A function to easily grep for a matching process
# USE: psg postgres
function psg {
  FIRST=`echo $1 | sed -e 's/^\(.\).*/\1/'`
  REST=`echo $1 | sed -e 's/^.\(.*\)/\1/'`
  ps aux | grep "[$FIRST]$REST"
}

# A function to extract correctly any archive based on extension
# USE: extract imazip.zip
#      extract imatar.tar
function extract () {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)  tar xjf $1      ;;
            *.tar.gz)   tar xzf $1      ;;
            *.bz2)      bunzip2 $1      ;;
            *.rar)      rar x $1        ;;
            *.gz)       gunzip $1       ;;
            *.tar)      tar xf $1       ;;
            *.tbz2)     tar xjf $1      ;;
            *.tgz)      tar xzf $1      ;;
            *.zip)      unzip $1        ;;
            *.Z)        uncompress $1   ;;
            *)          echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Aliases
# =====================
  # LS
  alias l='ls -lah'

  # Git
  alias gcl="git clone"
  alias gst="git status"
  alias gl="git pull"
  alias gp="git push"
  alias gd="git diff | mate"
  alias gc="git commit -v"
  alias gca="git commit -v -a"
  alias gb="git branch"
  alias gba="git branch -a"
  alias gcam="git commit -am"
  alias gbb="git branch -b"
  alias gcm="git commit -m"
  alias gup="git fetch -a && git branch -f master origin/master && git rebase origin/master"
  eval "$(hub alias -s)"
  
  # Misc
  alias be="bundle exec"
  # alias subl="sublime" # This seemed like a good idea once, but now it seems to screw everything up.


# Case-Insensitive Auto Completion
  bind "set completion-ignore-case on" 

# Final Configurations and Plugins
# =====================
  # Git Bash Completion
  # Will activate bash git completion if installed
  # via homebrew
  if [ -f `brew --prefix`/etc/bash_completion ]; then
    . `brew --prefix`/etc/bash_completion
  fi

  # RVM
  # Mandatory loading of RVM into the shell
  # This must be the last line of your bash_profile always
  [[ -s "/Users/$USER/.rvm/scripts/rvm" ]] && source "/Users/$USER/.rvm/scripts/rvm"  # This loads RVM into a shell session.
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Nylas stuff
# This helps your computer find programs installed by Homebrew    
# export PATH="/usr/local/bin:$PATH"     
# This lets pyenv automatically activate your virtualenv when you cd into cloud-core    
# eval `pyenv init - bash`    
# eval "$(pyenv virtualenv-init -)"     

# This aliases git to hub so you get GitHub commands under regular git    
# eval "$(hub alias -s)"
