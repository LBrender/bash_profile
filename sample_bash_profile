# Type 'touch ~/.bash_profile', open that file and copy the remainder of this stuff into it.

# Open a new terminal and verfiy that the bash_profile is sourced. If not...are you using zsh instead of bash?

# type 'echo $SHELL`. If the result is `bin/zsh` then you're using the wrong shell language. Go to 
# Terminal > Preferences. In "Shells open with:" you should select "Command", and enter "/bin/bash" as the command.

# The prompt is now delightfully called "The Prompt", and decorated with a star.
# Every line is timestamped, and if you're in a git repository, the name of the branch will be displayed.

# The new terminal will prompt you to install git tools, do that.

# If this is a new laptop, you'll need to get new keys to communicate with github.
# https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent
# Having gotten the key up and running, do the "configure SSO" option for it so you don't have to do the passphrase all the time.

# Once git is up and running, run 'git config branch.autosetuprebase always' and then 'git config branch.*branch-name*.rebase true' for any branch you've already got going
# Now git will use --rebase by defualt



# Configuring The Prompt
# ======================

  # if you install git via homebrew, or install the bash autocompletion via homebrew, you get __git_ps1 which you can use in the PS1
  # to display the git branch.  it's supposedly a bit faster and cleaner than manually parsing through sed. i dont' know if you care 
  # enough to change it

  # This function is called in your prompt to output your active git branch.
  function parse_git_branch {
    git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
  }

  # This function builds your prompt. It is called below
  function prompt {
    # Define some local colors
    local         RED="\[\033[0;31m\]" # This syntax is some weird bash color thing I never
    local   LIGHT_RED="\[\033[1;31m\]" # really understood
    local        BLUE="\[\033[0;34m\]"
    local        CHAR="☆"
    # ♥ ☆ - Keeping some cool ASCII Characters for reference

    # Here is where we actually export the PS1 Variable which stores the text for your prompt
    export PS1="[\e]2;\u@\h\a[\[\e[37;44;1m\]\t\[\e[0m\]]$BLUE\$(parse_git_branch) \[\e[32m\]\W\[\e[0m\]\n\[\e[0;34m\]The Prompt $CHAR \[\e[0m\]"
      PS2='> '
      PS4='+ '
    }

  # Finally call the function and our prompt is all pretty
  prompt

  # For more prompt coolness, check out Halloween Bash:
  # http://xta.github.io/HalloweenBash/

  # If you break your prompt, just delete the last thing you did.
  # And that's why it's good to keep your dotfiles in git too.

# Environment Variables
# =====================
  # Library Paths
  # These variables tell your shell where they can find certain
  # required libraries so other programs can reliably call the variable name
  # instead of a hardcoded path.

    # NODE_PATH
    # Node Path from Homebrew I believe
    export NODE_PATH="/usr/local/lib/node_modules:$NODE_PATH"

    # Those NODE & Python Paths won't break anything even if you
    # don't have NODE or Python installed. Eventually you will and
    # then you don't have to update your bash_profile

  # Configurations

    # GIT_MERGE_AUTO_EDIT
    # This variable configures git to not require a message when you merge.
    export GIT_MERGE_AUTOEDIT='no'

  # Paths

    # Our PATH variable is special and very important. Whenever we type a command into our shell,
    # it will try to find that command within a directory that is defined in our PATH.
    # Read http://blog.seldomatt.com/blog/2012/10/08/bash-and-the-one-true-path/ for more on that.

    # The USR_PATHS variable will just store all relevant /usr paths for easier usage
    # Each path is seperate via a : and we always use absolute paths.

    # A bit about the /usr directory
    # The /usr directory is a convention from linux that creates a common place to put
    # files and executables that the entire system needs access too. It tries to be user
    # independent, so whichever user is logged in should have permissions to the /usr directory.
    # We call that /usr/local. Within /usr/local, there is a bin directory for actually
    # storing the binaries (programs) that our system would want.
    # Also, Homebrew adopts this convetion so things installed via Homebrew
    # get symlinked into /usr/local
    export USR_PATHS="/usr/local:/usr/local/bin:/usr/local/sbin:/usr/bin:/Users/katebrender/Library/Python/2.7/bin"

    # We need the sublime path in the PATH so we can use the subl shortcut. Update this if needed, or 
    # move Sublime to the Applications folder.
    export SUBLIME_PATH="/Applications/Sublime Text.app/Contents/SharedSupport/bin"

    export PYTHON_PACKAGES="/usr/local/lib/python3.9/site-packages"
    export WKHTMLTOPDF="/Users/kbrender/Library/Python/3.9/lib/python/site-packages/wkhtmltopdf"

    # This has something to do with kubectl at Frame.io
    export DOT_LOCAL="/Users/katebrender/.local/bin/"

    export PSQL="/usr/local/opt/libpq/bin:"

    # We build our final PATH by combining the variables defined above
    # along with any previous values in the PATH variable.
    export PATH="$SUBLIME_PATH:$USR_PATHS:$PYTHON_PACKAGES:$WKHTMLTOPDF:$DOT_LOCAL:$PSQL:$PATH"

    # Make Sublime Text the default editor that opens from the terminal
    # export EDITOR="/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl"
    # This one works too, I'm not sure what the pro/con difference is between them.
    export EDITOR='subl -w'

# Helpful Functions
# =====================

# A function to CD into the desktop from anywhere
# so you just type desktop.
# HINT: It uses the built in USER variable to know your OS X username

# USE: desktop
function desktop {
  cd /Users/$USER/Desktop/$@
}

function frame {
  cd ~/Development/Frame.io
}

function massdriver {
  cd ~/Development/Frame.io/massdriver
}

function v4 {
  cd ~/Development/Frame.io/web-app
}

function v3 {
  cd ~/Development/Frame.io/web-client
}

function notes {
  cd ~/Desktop/notes
}

function rebase {
  git checkout develop; git fetch; git pull origin; git checkout -; git rebase origin/develop
}

# A function to easily grep for a matching process
# USE: psg postgres
function psg {
  FIRST=`echo $1 | sed -e 's/^\(.\).*/\1/'`
  REST=`echo $1 | sed -e 's/^.\(.*\)/\1/'`
  ps aux | grep "[$FIRST]$REST"
}

# A function to extract correctly any archive based on extension
# USE: extract imazip.zip
#      extract imatar.tar
function extract () {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)  tar xjf $1      ;;
            *.tar.gz)   tar xzf $1      ;;
            *.bz2)      bunzip2 $1      ;;
            *.rar)      rar x $1        ;;
            *.gz)       gunzip $1       ;;
            *.tar)      tar xf $1       ;;
            *.tbz2)     tar xjf $1      ;;
            *.tgz)      tar xzf $1      ;;
            *.zip)      unzip $1        ;;
            *.Z)        uncompress $1   ;;
            *)          echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

function set_upstream () {
  # This runs the command `git branch --no-color 2> /dev/null`, extracts only the line that
  # begins with '*', then extracts from that everything except the '*'.
  GIT_BRANCH=`git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
  git push --set-upstream origin $GIT_BRANCH
}

# Aliases
# =====================
  # LS
  alias l='ls -lah'

  # Git
  alias gcl="git clone"
  alias gst="git status"
  alias gl="git pull"
  alias gp="git push"
  alias gd="git diff | mate"
  alias gc="git commit -v"
  alias gca="git commit -v -a"
  alias gb="git branch"
  alias gba="git branch -a"
  alias gcam="git commit -am"
  alias gbb="git branch -b"
  alias gcm="git commit -m"
  alias gup="git fetch -a && git branch -f master origin/master && git rebase origin/master"
  alias new_scrap="git checkout develop;git fetch;git pull origin;git branch -d scrap;git checkout -b scrap;"

  # Misc
  alias be="bundle exec"
  # alias subl="sublime" # This seemed like a good idea once, but now it seems to screw everything up.


# Case-Insensitive Auto Completion
  bind "set completion-ignore-case on" 

# Final Configurations and Plugins
# =====================
  # Git Bash Completion
  # Will activate bash git completion if installed
  # via homebrew
  # if [ -f `brew --prefix`/etc/bash_completion ]; then
  #   . `brew --prefix`/etc/bash_completion
  # fi


# Frame.io Stuff:

. /usr/local/opt/asdf/libexec/asdf.sh
. /usr/local/opt/asdf/etc/bash_completion.d/asdf.bash
export MASSDRIVER_API_HOST=https://localhost:5555
export API_URL=https://localhost:5555
export SCHEMA_PATH=https://localhost:5555/graphql

export HOMEBREW_GITHUB_API_TOKEN=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

# alias aws-login=function(){eval $(command assume-role -duration 7h0m0s $@);}

function aws-login {
  command assume-role -duration 7h0m0s $@
}

export PATH="$HOME/.poetry/bin:$PATH"
